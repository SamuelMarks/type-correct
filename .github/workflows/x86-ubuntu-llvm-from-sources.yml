name: x86-Ubuntu-llvm-from-sources

on:
  push:
  pull_request:
    branches: [ master ]

# 75e33f71c2dae584b13a7d1186ae0a038ba98838 is release/13.x @ 20/01/2022

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v1
      - name: Install Dependencies
        run: |
          sudo apt-get install -y \
              cmake \
              ninja-build \
              manpages-dev \
              software-properties-common
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt-get update
          sudo apt-get install -y \
              gcc-12 \
              g++-12 \
              libc-dev
          sudo update-alternatives \
              --install '/usr/bin/gcc' gcc '/usr/bin/gcc-12' 110 \
              --slave '/usr/bin/g++' g++ '/usr/bin/g++-12' \
              --slave '/usr/bin/gcov' gcov '/usr/bin/gcov-12'
          gcc --version ; g++ --version ; cmake --version ; '/usr/bin/ld' --version ; '/usr/bin/x86_64-linux-gnu-ld.gold' --version
      - name: Cache llvm-project
        id: cache-llvm-project
        uses: actions/cache@v2
        with:
          path: llvm-project
          key: ${{ runner.os }}-llvm-project-75e33f71c2dae584b13a7d1186ae0a038ba98838
      - name: Clone llvm-project
        uses: actions/checkout@v2
        with:
          repository: "llvm/llvm-project"
          ref: 75e33f71c2dae584b13a7d1186ae0a038ba98838
          path: llvm-project
        if: steps.cache-llvm-project.outputs.cache-hit != 'true'
      - name: Make ld.gold the default linker
        run: |
          # This a quick and easy hack. Not something I would use on my
          # production machine.
          sudo rm '/usr/bin/ld'
          sudo ln -s '/usr/bin/x86_64-linux-gnu-ld.gold' '/usr/bin/ld'
      - name: Build LLVM & Clang
        if: steps.cache-llvm-project.outputs.cache-hit != 'true'
        run: |
          pushd 'llvm-project'
          mkdir 'build' && pushd "$_"
          cmake -G 'Ninja' \
            -DCMAKE_BUILD_TYPE='Release' \
            -DLLVM_ENABLE_PROJECTS='clang;libcxx;libcxxabi' \
            -DLLVM_TARGETS_TO_BUILD='X86' \
            -DLLVM_OPTIMIZED_TABLEGEN='ON' \
            -DLLVM_INCLUDE_TESTS='OFF' \
            ../llvm
          cmake --build .
          popd
          popd
      - name: Build type-correct + run tests
        run: |
          export C_INCLUDE_PATH='/usr/lib/llvm-12/lib/clang/12.0.0/include'
          # Or '/usr/lib/gcc/x86_64-linux-gnu/12/include'
          # â€¦or '/usr/include/linux'?
          mkdir 'build' && pushd "$_"
          cmake --system-information
          # Test with Clang_DIR
          cmake \
             -DClang_DIR="$GITHUB_WORKSPACE/llvm-project/build/lib/cmake/clang/" \
             -DCMAKE_CXX_STANDARD_INCLUDE_DIRECTORIES='/usr/lib/gcc/x86_64-linux-gnu/12/include' \
             ../
          cmake --build .
          ctest -VV -CRelease . || ( test -f 'Testing/Temporary/LastTest.log' && cat "$_" && exit 1 )
          popd
